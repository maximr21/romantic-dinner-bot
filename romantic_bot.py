import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
import os

API_TOKEN = os.getenv("API_TOKEN")  # –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É—é
OWNER_ID = int(os.getenv("OWNER_ID"))  # –∏–ª–∏ –≤—Å—Ç–∞–≤–∏—Ç—å Telegram ID –Ω–∞–ø—Ä—è–º—É—é

menu = [
    {
        "name": "ü•ó –°–∞–ª–∞—Ç —Å –∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏",
        "kisses": 3,
        "image": "https://cdn.pixabay.com/photo/2017/03/17/08/13/shrimp-2150880_1280.jpg",
        "desc": "–õ—ë–≥–∫–∏–π —Å–∞–ª–∞—Ç —Å —Ö—Ä—É—Å—Ç—è—â–∏–º–∏ –ª–∏—Å—Ç—å—è–º–∏ —Å–∞–ª–∞—Ç–∞, —Ç–æ–º–∞—Ç–∞–º–∏ —á–µ—Ä—Ä–∏ –∏ –æ–±–∂–∞—Ä–µ–Ω–Ω—ã–º–∏ –∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏.\nüíã –°—Ç–æ–∏–º–æ—Å—Ç—å: 3 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞"
    },
    {
        "name": "üßÄ –ë—Ä—É—Å–∫–µ—Ç—Ç—ã —Å –º–æ—Ü–∞—Ä–µ–ª–ª–æ–π",
        "kisses": 2,
        "image": "https://cdn.pixabay.com/photo/2020/01/22/08/50/tomato-4783712_1280.jpg",
        "desc": "–•—Ä—É—Å—Ç—è—â–∏–π –±–∞–≥–µ—Ç —Å —Ç—ë–ø–ª–æ–π –º–æ—Ü–∞—Ä–µ–ª–ª–æ–π, —Å–≤–µ–∂–∏–º–∏ —Ç–æ–º–∞—Ç–∞–º–∏ –∏ –±–∞–∑–∏–ª–∏–∫–æ–º.\nüíã –°—Ç–æ–∏–º–æ—Å—Ç—å: 2 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞"
    },
    {
        "name": "üçù –ü–∞—Å—Ç–∞ —Å —Å–æ—É—Å–æ–º –ê–ª—å—Ñ—Ä–µ–¥–æ",
        "kisses": 5,
        "image": "https://cdn.pixabay.com/photo/2022/03/18/11/17/spaghetti-7076177_1280.jpg",
        "desc": "–ù–µ–∂–Ω–∞—è –ø–∞—Å—Ç–∞ –≤ —Å–ª–∏–≤–æ—á–Ω–æ–º —Å–æ—É—Å–µ —Å –ø–∞—Ä–º–µ–∑–∞–Ω–æ–º –∏ –∫—É—Ä–∏—Ü–µ–π.\nüíã –°—Ç–æ–∏–º–æ—Å—Ç—å: 5 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤"
    },
    {
        "name": "üçó –ö—É—Ä–∏–Ω–æ–µ —Ñ–∏–ª–µ –≤ —Å–ª–∏–≤–æ—á–Ω–æ-–≥—Ä–∏–±–Ω–æ–º —Å–æ—É—Å–µ",
        "kisses": 5,
        "image": "https://cdn.pixabay.com/photo/2016/03/05/19/02/abstract-1238657_1280.jpg",
        "desc": "–°–æ—á–Ω–æ–µ –∫—É—Ä–∏–Ω–æ–µ —Ñ–∏–ª–µ, —Ç—É—à—ë–Ω–æ–µ –≤ —Å–æ—É—Å–µ —Å —à–∞–º–ø–∏–Ω—å–æ–Ω–∞–º–∏.\nüíã –°—Ç–æ–∏–º–æ—Å—Ç—å: 5 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤"
    },
    {
        "name": "üç∞ –¢–æ—Ä—Ç ¬´–¢—Ä–∏ —à–æ–∫–æ–ª–∞–¥–∞¬ª",
        "kisses": 4,
        "image": "https://cdn.pixabay.com/photo/2014/11/28/08/03/cake-548591_1280.jpg",
        "desc": "–í–æ–∑–¥—É—à–Ω—ã–π –¥–µ—Å–µ—Ä—Ç —Å —Ç—Ä–µ–º—è —Å–ª–æ—è–º–∏: –≥–æ—Ä—å–∫–∏–π, –º–æ–ª–æ—á–Ω—ã–π –∏ –±–µ–ª—ã–π —à–æ–∫–æ–ª–∞–¥.\nüíã –°—Ç–æ–∏–º–æ—Å—Ç—å: 4 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞"
    },
    {
        "name": "ü•§ –ö–ª—É–±–Ω–∏—á–Ω—ã–π –ª–∏–º–æ–Ω–∞–¥",
        "kisses": 2,
        "image": "https://cdn.pixabay.com/photo/2016/06/23/18/53/drink-1474444_1280.jpg",
        "desc": "–û—Å–≤–µ–∂–∞—é—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫ –∏–∑ —Å–≤–µ–∂–µ–π –∫–ª—É–±–Ω–∏–∫–∏, –º—è—Ç—ã –∏ –ª–∏–º–æ–Ω–∞.\nüíã –°—Ç–æ–∏–º–æ—Å—Ç—å: 2 –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞"
    }
]

user_carts = {}

# –°—Ç–∞—Ä—Ç + –º–µ–Ω—é
async def start_cmd(message: Message, bot: Bot):
    user_id = message.from_user.id
    user_carts[user_id] = []

    await message.answer(
        "üåπ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –î–æ–º–∞—à–Ω–∏–π –†–µ—Å—Ç–æ—Ä–∞–Ω!\n"
        "–°–µ–≥–æ–¥–Ω—è —Ç—ã ‚Äî —Å–∞–º–∞—è –∂–µ–ª–∞–Ω–Ω–∞—è –≥–æ—Å—Ç—å—è ‚ù§Ô∏è\n\n"
        "–í—ã–±–∏—Ä–∞–π, —á—Ç–æ —Ç–µ–±–µ –ø–æ –≤–∫—É—Å—É, –∏ —è —Å –ª—é–±–æ–≤—å—é –≤—Å—ë –ø—Ä–∏–≥–æ—Ç–æ–≤–ª—é üòò"
    )

    for idx, item in enumerate(menu):
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"–î–æ–±–∞–≤–∏—Ç—å –∑–∞ {item['kisses']} üòò", callback_data=f"add_{idx}")]
        ])
        await bot.send_photo(
            chat_id=user_id,
            photo=item["image"],
            caption=f"{item['name']}\n\n{item['desc']}",
            reply_markup=kb
        )

    action_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõçÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")],
        [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")]
    ])
    await message.answer("–ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤–∞ ‚Äî –∑–∞–≤–µ—Ä—à–∏ –∑–∞–∫–∞–∑ –∏–ª–∏ –æ—á–∏—Å—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É:", reply_markup=action_kb)

# –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ
async def add_item(call: CallbackQuery):
    idx = int(call.data.split("_")[1])
    user_id = call.from_user.id
    item = menu[idx]

    cart = user_carts.setdefault(user_id, [])
    if item in cart:
        await call.answer("–¢—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∞ —ç—Ç–æ –±–ª—é–¥–æ üíï", show_alert=True)
        return

    cart.append(item)
    await call.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {item['name']}")

# –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑
async def checkout(call: CallbackQuery, bot: Bot):
    user_id = call.from_user.id
    cart = user_carts.get(user_id, [])

    if not cart:
        await call.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ üò¢")
        return

    summary = "\n".join([f"‚Ä¢ {item['name']} ‚Äî {item['kisses']} üòò" for item in cart])
    total = sum(item['kisses'] for item in cart)
    text = f"üßæ –¢–≤–æ–π –∑–∞–∫–∞–∑:\n\n{summary}\n\n–ò—Ç–æ–≥–æ: {total} –ø–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤ üíã"

    await call.message.answer(text)
    await call.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑, –ª—é–±–∏–º–∞—è üíñ –í—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ —Å –¥—É—à–æ–π –∏ –ª—é–±–æ–≤—å—é ‚ú®")
    await call.answer("–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω üíå")

    await bot.send_message(
        OWNER_ID,
        f"üì• –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç {call.from_user.full_name} (@{call.from_user.username}):\n\n{text}"
    )

    user_carts[user_id] = []

# –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
async def clear_cart(call: CallbackQuery):
    user_id = call.from_user.id
    user_carts[user_id] = []
    await call.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞ üßπ")
    await call.message.answer("–¢–≤–æ—è –∫–æ—Ä–∑–∏–Ω–∞ —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç–∞ üå∏")

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    bot = Bot(token=API_TOKEN)
    dp = Dispatcher()

    dp.message.register(start_cmd, Command("start"))
    dp.callback_query.register(add_item, F.data.startswith("add_"))
    dp.callback_query.register(checkout, F.data == "checkout")
    dp.callback_query.register(clear_cart, F.data == "clear_cart")

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
